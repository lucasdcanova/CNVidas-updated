const http = require('http');

// Fun√ß√£o para fazer requisi√ß√µes HTTP
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const result = body ? JSON.parse(body) : {};
          resolve({ statusCode: res.statusCode, data: result });
        } catch (error) {
          resolve({ statusCode: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testPartnerServices() {
  console.log('üöÄ Testando funcionalidade de servi√ßos de parceiros...\n');

  try {
    // 1. Login do parceiro
    console.log('1. üîê Fazendo login do parceiro...');
    const loginResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: 'partner-test@example.com',
      password: 'test123'
    });

    if (loginResponse.statusCode !== 200) {
      throw new Error(`Login falhou: ${loginResponse.statusCode}`);
    }

    const token = loginResponse.data.token;
    console.log('‚úÖ Login realizado com sucesso');

    // 2. Buscar servi√ßos do parceiro espec√≠fico
    console.log('\n2. üìã Buscando servi√ßos do parceiro logado...');
    const partnerServicesResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/partners/my-services',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (partnerServicesResponse.statusCode !== 200) {
      throw new Error(`Busca de servi√ßos do parceiro falhou: ${partnerServicesResponse.statusCode}`);
    }

    const partnerServices = partnerServicesResponse.data;
    console.log(`‚úÖ Encontrados ${partnerServices.length} servi√ßos do parceiro`);

    // 3. Buscar todos os servi√ßos (para compara√ß√£o)
    console.log('\n3. üåê Buscando todos os servi√ßos (para compara√ß√£o)...');
    const allServicesResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/services',
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (allServicesResponse.statusCode !== 200) {
      throw new Error(`Busca de todos os servi√ßos falhou: ${allServicesResponse.statusCode}`);
    }

    const allServices = allServicesResponse.data;
    console.log(`‚úÖ Encontrados ${allServices.length} servi√ßos totais`);

    // 4. Verificar que os servi√ßos do parceiro s√£o um subconjunto correto
    console.log('\n4. ‚úîÔ∏è Verificando se os servi√ßos s√£o apenas do parceiro...');
    
    // Obter partnerId do primeiro servi√ßo (todos devem ter o mesmo partnerId)
    const expectedPartnerId = partnerServices[0]?.partnerId;
    if (!expectedPartnerId) {
      throw new Error('Nenhum servi√ßo encontrado para o parceiro');
    }

    const invalidServices = partnerServices.filter(service => service.partnerId !== expectedPartnerId);
    if (invalidServices.length > 0) {
      throw new Error(`Encontrados ${invalidServices.length} servi√ßos de outros parceiros na resposta!`);
    }

    console.log(`‚úÖ Todos os ${partnerServices.length} servi√ßos pertencem ao partnerId ${expectedPartnerId}`);

    // 5. Verificar que h√° outros servi√ßos de outros parceiros
    const servicesFromOtherPartners = allServices.filter(service => service.partnerId !== expectedPartnerId);
    console.log(`‚úÖ Existem ${servicesFromOtherPartners.length} servi√ßos de outros parceiros (n√£o mostrados)`);

    // 6. Exibir resumo dos servi√ßos do parceiro
    console.log('\nüìä Resumo dos servi√ßos do parceiro:');
    partnerServices.forEach((service, index) => {
      const regularPrice = (service.regularPrice / 100).toFixed(2);
      const discountPrice = (service.discountPrice / 100).toFixed(2);
      console.log(`  ${index + 1}. ${service.name}`);
      console.log(`     Categoria: ${service.category}`);
      console.log(`     Pre√ßo: R$ ${regularPrice} ‚Üí R$ ${discountPrice} (${service.discountPercentage}% off)`);
      console.log(`     Status: ${service.isActive ? 'Ativo' : 'Inativo'}`);
    });

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('üìã Resumo:');
    console.log(`   ‚Ä¢ Parceiro v√™ apenas seus pr√≥prios servi√ßos: ${partnerServices.length}`);
    console.log(`   ‚Ä¢ Total de servi√ßos no sistema: ${allServices.length}`);
    console.log(`   ‚Ä¢ Outros parceiros t√™m: ${servicesFromOtherPartners.length} servi√ßos`);
    console.log('\n‚úÖ A funcionalidade "Meus Servi√ßos" est√° funcionando corretamente!');

  } catch (error) {
    console.error('\n‚ùå ERRO no teste:', error.message);
    process.exit(1);
  }
}

// Executar o teste
testPartnerServices(); 